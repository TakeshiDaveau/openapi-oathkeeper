([]rule.Rule) (len=19) {
  (rule.Rule) {
    ID: (string) (len=6) "addPet",
    Version: (string) "",
    Description: (string) (len=26) "Add a new pet to the store",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=11) "/api/v3/pet"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=151) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 63  6f 6e 73 6f 6c 65 2e 6f  |ttps://console.o|
          00000020  72 79 2e 73 68 2f 2e 77  65 6c 6c 2d 6b 6e 6f 77  |ry.sh/.well-know|
          00000030  6e 2f 6a 77 6b 73 2e 6a  73 6f 6e 22 5d 2c 22 74  |n/jwks.json"],"t|
          00000040  72 75 73 74 65 64 5f 69  73 73 75 65 72 73 22 3a  |rusted_issuers":|
          00000050  5b 22 68 74 74 70 73 3a  2f 2f 63 6f 6e 73 6f 6c  |["https://consol|
          00000060  65 2e 6f 72 79 2e 73 68  22 5d 2c 22 72 65 71 75  |e.ory.sh"],"requ|
          00000070  69 72 65 64 5f 73 63 6f  70 65 22 3a 5b 22 77 72  |ired_scope":["wr|
          00000080  69 74 65 3a 70 65 74 73  22 2c 22 72 65 61 64 3a  |ite:pets","read:|
          00000090  70 65 74 73 22 5d 7d                              |pets"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "createUser",
    Version: (string) "",
    Description: (string) (len=44) "This can only be done by the logged in user.",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=12) "/api/v3/user"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=24) "createUsersWithListInput",
    Version: (string) "",
    Description: (string) (len=44) "Creates list of users with given input array",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=27) "/api/v3/user/createWithList"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=11) "deleteOrder",
    Version: (string) "",
    Description: (string) (len=113) "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=6) "DELETE"
      },
      URL: (string) (len=24) "/api/v3/store/order/<.*>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=9) "deletePet",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=6) "DELETE"
      },
      URL: (string) (len=16) "/api/v3/pet/<.*>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=151) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 63  6f 6e 73 6f 6c 65 2e 6f  |ttps://console.o|
          00000020  72 79 2e 73 68 2f 2e 77  65 6c 6c 2d 6b 6e 6f 77  |ry.sh/.well-know|
          00000030  6e 2f 6a 77 6b 73 2e 6a  73 6f 6e 22 5d 2c 22 74  |n/jwks.json"],"t|
          00000040  72 75 73 74 65 64 5f 69  73 73 75 65 72 73 22 3a  |rusted_issuers":|
          00000050  5b 22 68 74 74 70 73 3a  2f 2f 63 6f 6e 73 6f 6c  |["https://consol|
          00000060  65 2e 6f 72 79 2e 73 68  22 5d 2c 22 72 65 71 75  |e.ory.sh"],"requ|
          00000070  69 72 65 64 5f 73 63 6f  70 65 22 3a 5b 22 77 72  |ired_scope":["wr|
          00000080  69 74 65 3a 70 65 74 73  22 2c 22 72 65 61 64 3a  |ite:pets","read:|
          00000090  70 65 74 73 22 5d 7d                              |pets"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "deleteUser",
    Version: (string) "",
    Description: (string) (len=44) "This can only be done by the logged in user.",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=6) "DELETE"
      },
      URL: (string) (len=17) "/api/v3/user/<.*>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=16) "findPetsByStatus",
    Version: (string) "",
    Description: (string) (len=67) "Multiple status values can be provided with comma separated strings",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=24) "/api/v3/pet/findByStatus"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=151) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 63  6f 6e 73 6f 6c 65 2e 6f  |ttps://console.o|
          00000020  72 79 2e 73 68 2f 2e 77  65 6c 6c 2d 6b 6e 6f 77  |ry.sh/.well-know|
          00000030  6e 2f 6a 77 6b 73 2e 6a  73 6f 6e 22 5d 2c 22 74  |n/jwks.json"],"t|
          00000040  72 75 73 74 65 64 5f 69  73 73 75 65 72 73 22 3a  |rusted_issuers":|
          00000050  5b 22 68 74 74 70 73 3a  2f 2f 63 6f 6e 73 6f 6c  |["https://consol|
          00000060  65 2e 6f 72 79 2e 73 68  22 5d 2c 22 72 65 71 75  |e.ory.sh"],"requ|
          00000070  69 72 65 64 5f 73 63 6f  70 65 22 3a 5b 22 77 72  |ired_scope":["wr|
          00000080  69 74 65 3a 70 65 74 73  22 2c 22 72 65 61 64 3a  |ite:pets","read:|
          00000090  70 65 74 73 22 5d 7d                              |pets"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=14) "findPetsByTags",
    Version: (string) "",
    Description: (string) (len=93) "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=22) "/api/v3/pet/findByTags"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=151) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 63  6f 6e 73 6f 6c 65 2e 6f  |ttps://console.o|
          00000020  72 79 2e 73 68 2f 2e 77  65 6c 6c 2d 6b 6e 6f 77  |ry.sh/.well-know|
          00000030  6e 2f 6a 77 6b 73 2e 6a  73 6f 6e 22 5d 2c 22 74  |n/jwks.json"],"t|
          00000040  72 75 73 74 65 64 5f 69  73 73 75 65 72 73 22 3a  |rusted_issuers":|
          00000050  5b 22 68 74 74 70 73 3a  2f 2f 63 6f 6e 73 6f 6c  |["https://consol|
          00000060  65 2e 6f 72 79 2e 73 68  22 5d 2c 22 72 65 71 75  |e.ory.sh"],"requ|
          00000070  69 72 65 64 5f 73 63 6f  70 65 22 3a 5b 22 77 72  |ired_scope":["wr|
          00000080  69 74 65 3a 70 65 74 73  22 2c 22 72 65 61 64 3a  |ite:pets","read:|
          00000090  70 65 74 73 22 5d 7d                              |pets"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=12) "getInventory",
    Version: (string) "",
    Description: (string) (len=43) "Returns a map of status codes to quantities",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=23) "/api/v3/store/inventory"
    }),
    Authenticators: ([]rule.Handler) {
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=12) "getOrderById",
    Version: (string) "",
    Description: (string) (len=98) "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=24) "/api/v3/store/order/<.*>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "getPetById",
    Version: (string) "",
    Description: (string) (len=20) "Returns a single pet",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=16) "/api/v3/pet/<.*>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=151) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 63  6f 6e 73 6f 6c 65 2e 6f  |ttps://console.o|
          00000020  72 79 2e 73 68 2f 2e 77  65 6c 6c 2d 6b 6e 6f 77  |ry.sh/.well-know|
          00000030  6e 2f 6a 77 6b 73 2e 6a  73 6f 6e 22 5d 2c 22 74  |n/jwks.json"],"t|
          00000040  72 75 73 74 65 64 5f 69  73 73 75 65 72 73 22 3a  |rusted_issuers":|
          00000050  5b 22 68 74 74 70 73 3a  2f 2f 63 6f 6e 73 6f 6c  |["https://consol|
          00000060  65 2e 6f 72 79 2e 73 68  22 5d 2c 22 72 65 71 75  |e.ory.sh"],"requ|
          00000070  69 72 65 64 5f 73 63 6f  70 65 22 3a 5b 22 77 72  |ired_scope":["wr|
          00000080  69 74 65 3a 70 65 74 73  22 2c 22 72 65 61 64 3a  |ite:pets","read:|
          00000090  70 65 74 73 22 5d 7d                              |pets"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=13) "getUserByName",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=17) "/api/v3/user/<.*>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=9) "loginUser",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=18) "/api/v3/user/login"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "logoutUser",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "GET"
      },
      URL: (string) (len=19) "/api/v3/user/logout"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "placeOrder",
    Version: (string) "",
    Description: (string) (len=30) "Place a new order in the store",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=19) "/api/v3/store/order"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=9) "updatePet",
    Version: (string) "",
    Description: (string) (len=28) "Update an existing pet by Id",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "PUT"
      },
      URL: (string) (len=11) "/api/v3/pet"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=151) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 63  6f 6e 73 6f 6c 65 2e 6f  |ttps://console.o|
          00000020  72 79 2e 73 68 2f 2e 77  65 6c 6c 2d 6b 6e 6f 77  |ry.sh/.well-know|
          00000030  6e 2f 6a 77 6b 73 2e 6a  73 6f 6e 22 5d 2c 22 74  |n/jwks.json"],"t|
          00000040  72 75 73 74 65 64 5f 69  73 73 75 65 72 73 22 3a  |rusted_issuers":|
          00000050  5b 22 68 74 74 70 73 3a  2f 2f 63 6f 6e 73 6f 6c  |["https://consol|
          00000060  65 2e 6f 72 79 2e 73 68  22 5d 2c 22 72 65 71 75  |e.ory.sh"],"requ|
          00000070  69 72 65 64 5f 73 63 6f  70 65 22 3a 5b 22 77 72  |ired_scope":["wr|
          00000080  69 74 65 3a 70 65 74 73  22 2c 22 72 65 61 64 3a  |ite:pets","read:|
          00000090  70 65 74 73 22 5d 7d                              |pets"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=17) "updatePetWithForm",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=16) "/api/v3/pet/<.*>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=151) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 63  6f 6e 73 6f 6c 65 2e 6f  |ttps://console.o|
          00000020  72 79 2e 73 68 2f 2e 77  65 6c 6c 2d 6b 6e 6f 77  |ry.sh/.well-know|
          00000030  6e 2f 6a 77 6b 73 2e 6a  73 6f 6e 22 5d 2c 22 74  |n/jwks.json"],"t|
          00000040  72 75 73 74 65 64 5f 69  73 73 75 65 72 73 22 3a  |rusted_issuers":|
          00000050  5b 22 68 74 74 70 73 3a  2f 2f 63 6f 6e 73 6f 6c  |["https://consol|
          00000060  65 2e 6f 72 79 2e 73 68  22 5d 2c 22 72 65 71 75  |e.ory.sh"],"requ|
          00000070  69 72 65 64 5f 73 63 6f  70 65 22 3a 5b 22 77 72  |ired_scope":["wr|
          00000080  69 74 65 3a 70 65 74 73  22 2c 22 72 65 61 64 3a  |ite:pets","read:|
          00000090  70 65 74 73 22 5d 7d                              |pets"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "updateUser",
    Version: (string) "",
    Description: (string) (len=44) "This can only be done by the logged in user.",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=3) "PUT"
      },
      URL: (string) (len=17) "/api/v3/user/<.*>"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  },
  (rule.Rule) {
    ID: (string) (len=10) "uploadFile",
    Version: (string) "",
    Description: (string) "",
    Match: (*rule.Match)({
      Methods: ([]string) (len=1) {
        (string) (len=4) "POST"
      },
      URL: (string) (len=28) "/api/v3/pet/<.*>/uploadImage"
    }),
    Authenticators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=3) "jwt",
        Config: (json.RawMessage) (len=151) {
          00000000  7b 22 6a 77 6b 73 5f 75  72 6c 73 22 3a 5b 22 68  |{"jwks_urls":["h|
          00000010  74 74 70 73 3a 2f 2f 63  6f 6e 73 6f 6c 65 2e 6f  |ttps://console.o|
          00000020  72 79 2e 73 68 2f 2e 77  65 6c 6c 2d 6b 6e 6f 77  |ry.sh/.well-know|
          00000030  6e 2f 6a 77 6b 73 2e 6a  73 6f 6e 22 5d 2c 22 74  |n/jwks.json"],"t|
          00000040  72 75 73 74 65 64 5f 69  73 73 75 65 72 73 22 3a  |rusted_issuers":|
          00000050  5b 22 68 74 74 70 73 3a  2f 2f 63 6f 6e 73 6f 6c  |["https://consol|
          00000060  65 2e 6f 72 79 2e 73 68  22 5d 2c 22 72 65 71 75  |e.ory.sh"],"requ|
          00000070  69 72 65 64 5f 73 63 6f  70 65 22 3a 5b 22 77 72  |ired_scope":["wr|
          00000080  69 74 65 3a 70 65 74 73  22 2c 22 72 65 61 64 3a  |ite:pets","read:|
          00000090  70 65 74 73 22 5d 7d                              |pets"]}|
        }
      }
    },
    Authorizer: (rule.Handler) {
      Handler: (string) (len=5) "allow",
      Config: (json.RawMessage) <nil>
    },
    Mutators: ([]rule.Handler) (len=1) {
      (rule.Handler) {
        Handler: (string) (len=4) "noop",
        Config: (json.RawMessage) <nil>
      }
    },
    Errors: ([]rule.ErrorHandler) <nil>,
    Upstream: (rule.Upstream) {
      PreserveHost: (bool) false,
      StripPath: (string) "",
      URL: (string) ""
    },
    matchingEngine: (rule.MatchingEngine) <nil>
  }
}
